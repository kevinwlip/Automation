<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined - API endpoint" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="dashboard-series" elementType="Argument">
            <stringProp name="Argument.name">dashboard-series</stringProp>
            <stringProp name="Argument.value">dashboard/series</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Dashboard series graph</stringProp>
          </elementProp>
          <elementProp name="alert-series" elementType="Argument">
            <stringProp name="Argument.name">alert-series</stringProp>
            <stringProp name="Argument.value">iotinventory/series</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Alert series graph</stringProp>
          </elementProp>
          <elementProp name="dashboard-seriesagg" elementType="Argument">
            <stringProp name="Argument.name">dashboard-seriesagg</stringProp>
            <stringProp name="Argument.value">dashboard/seriesagg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Dashboard network summary</stringProp>
          </elementProp>
          <elementProp name="dashboard-appagg" elementType="Argument">
            <stringProp name="Argument.name">dashboard-appagg</stringProp>
            <stringProp name="Argument.value">dashboard/appagg</stringProp>
            <stringProp name="Argument.desc">Dashboard top app/protocol</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appagg-outputtype" elementType="Argument">
            <stringProp name="Argument.name">appagg-outputtype</stringProp>
            <stringProp name="Argument.value">session</stringProp>
            <stringProp name="Argument.desc">Top App/Protocol filter by session</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboard-appseries" elementType="Argument">
            <stringProp name="Argument.name">dashboard-appseries</stringProp>
            <stringProp name="Argument.value">dashboard/appseries</stringProp>
            <stringProp name="Argument.desc">Dashboard top app/protocol series</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboard-devagg" elementType="Argument">
            <stringProp name="Argument.name">dashboard-devagg</stringProp>
            <stringProp name="Argument.value">dashboard/devagg</stringProp>
            <stringProp name="Argument.desc">Dashboard top devices</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboard-devseries" elementType="Argument">
            <stringProp name="Argument.name">dashboard-devseries</stringProp>
            <stringProp name="Argument.value">dashboard/devseries</stringProp>
            <stringProp name="Argument.desc">Dashboard top device series</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="devagg-outputtype" elementType="Argument">
            <stringProp name="Argument.name">devagg-outputtype</stringProp>
            <stringProp name="Argument.value">destination</stringProp>
            <stringProp name="Argument.desc">Top Devices filter by destination</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iotprofile-stats" elementType="Argument">
            <stringProp name="Argument.name">iotprofile-stats</stringProp>
            <stringProp name="Argument.value">iotprofile/stats</stringProp>
            <stringProp name="Argument.desc">Profile widget on Dashboard</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboard-stat" elementType="Argument">
            <stringProp name="Argument.name">dashboard-stat</stringProp>
            <stringProp name="Argument.value">dashboard/stat</stringProp>
            <stringProp name="Argument.desc">Dashboard risk assessment</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboard-distribution" elementType="Argument">
            <stringProp name="Argument.name">dashboard-distribution</stringProp>
            <stringProp name="Argument.value">dashboard/distribution</stringProp>
            <stringProp name="Argument.desc">Dashboard devices by subnet/vlan</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboard-destinationagg" elementType="Argument">
            <stringProp name="Argument.name">dashboard-destinationagg</stringProp>
            <stringProp name="Argument.value">dashboard/destinationagg</stringProp>
            <stringProp name="Argument.desc">Dashboard external endpoint geomap</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="device-sankeychart" elementType="Argument">
            <stringProp name="Argument.name">device-sankeychart</stringProp>
            <stringProp name="Argument.value">iotdevice/networkmapping</stringProp>
            <stringProp name="Argument.desc">Device Inventory sankey chart </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="device-destination" elementType="Argument">
            <stringProp name="Argument.name">device-destination</stringProp>
            <stringProp name="Argument.value">iotdevice/networkusage</stringProp>
            <stringProp name="Argument.desc">Device Inventory unique destinations</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined - Server Info" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="InDays" elementType="Argument">
            <stringProp name="Argument.name">InDays</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">day(s)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="direction" elementType="Argument">
            <stringProp name="Argument.name">direction</stringProp>
            <stringProp name="Argument.value">all</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filter_monitored" elementType="Argument">
            <stringProp name="Argument.name">filter_monitored</stringProp>
            <stringProp name="Argument.value">yes</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="authToken" elementType="Argument">
            <stringProp name="Argument.name">authToken</stringProp>
            <stringProp name="Argument.value">${__P(authToken,eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ6YWRtaW4iLCJzeXNhZG1pbiI6dHJ1ZSwiaWF0IjoxNTA0MjE0NzA5LCJleHAiOjE1OTA2MTQ3MDksImlzcyI6Inppbmdib3gifQ.R-8h3gpFZPVRZ7DiXin4P6qh7MA2INwLiReG5tlqHdo)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiversion" elementType="Argument">
            <stringProp name="Argument.name">apiversion</stringProp>
            <stringProp name="Argument.value">v0.3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tenantid" elementType="Argument">
            <stringProp name="Argument.name">tenantid</stringProp>
            <stringProp name="Argument.value">${__P(tenantid,testing-soho)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="siteids" elementType="Argument">
            <stringProp name="Argument.name">siteids</stringProp>
            <stringProp name="Argument.value">${__P(siteids,0)}</stringProp>
            <stringProp name="Argument.desc">Baycare siteid 5 is SJHM.  siteid 12 for X2 testing.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">${__P(server,testing.zingbox.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined - Configuration" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="connecttime" elementType="Argument">
            <stringProp name="Argument.name">connecttime</stringProp>
            <stringProp name="Argument.value">${__P(connecttime,3000)}</stringProp>
            <stringProp name="Argument.desc">HTTP connect time, 3 sec max</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responsetime" elementType="Argument">
            <stringProp name="Argument.name">responsetime</stringProp>
            <stringProp name="Argument.value">${__P(responsetime,100000)}</stringProp>
            <stringProp name="Argument.desc">HTTP response time, 100 sec max</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="etime" elementType="Argument">
            <stringProp name="Argument.name">etime</stringProp>
            <stringProp name="Argument.value">now</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="batch" elementType="Argument">
            <stringProp name="Argument.name">batch</stringProp>
            <stringProp name="Argument.value">${__P(batch,no)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">If yes, then each time series queries is broken to 4 queries</stringProp>
          </elementProp>
          <elementProp name="assert-max-duration" elementType="Argument">
            <stringProp name="Argument.name">assert-max-duration</stringProp>
            <stringProp name="Argument.value">${__P(maxlatency,10000)}</stringProp>
            <stringProp name="Argument.desc">Max response time (mS) before assert request as fail</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="assert-min-body" elementType="Argument">
            <stringProp name="Argument.name">assert-min-body</stringProp>
            <stringProp name="Argument.value">${__P(minbodysize,160)}</stringProp>
            <stringProp name="Argument.desc">Min body size (Bytes) before assert request as fail.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="graph" elementType="Argument">
            <stringProp name="Argument.name">graph</stringProp>
            <stringProp name="Argument.value">${__P(graph,yes)}</stringProp>
            <stringProp name="Argument.desc">Graph result</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="force-etime-now" elementType="Argument">
            <stringProp name="Argument.name">force-etime-now</stringProp>
            <stringProp name="Argument.value">${__P(force-etime-now,yes)}</stringProp>
            <stringProp name="Argument.desc">Forcing etime to always be now.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="default-time-loop" elementType="Argument">
            <stringProp name="Argument.name">default-time-loop</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="simuser" elementType="Argument">
            <stringProp name="Argument.name">simuser</stringProp>
            <stringProp name="Argument.value">${__P(simuser,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iteration" elementType="Argument">
            <stringProp name="Argument.name">iteration</stringProp>
            <stringProp name="Argument.value">${__P(iteration,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timevalue" elementType="Argument">
            <stringProp name="Argument.name">timevalue</stringProp>
            <stringProp name="Argument.value">allranges</stringProp>
            <stringProp name="Argument.desc">allranges | hour | day | week | month | 6months | all</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="test-to-run" elementType="Argument">
            <stringProp name="Argument.name">test-to-run</stringProp>
            <stringProp name="Argument.value">${__P(test-to-run,all)}</stringProp>
            <stringProp name="Argument.desc">Run specific test.  Set &apos;all&apos; to run all tests.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Beanshell - set authToken tenantid siteids timerange" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import java.util.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


//String tmp = &quot;.*(aws|baycare|bmcc|lb00|api|x2|m2|cloud|enterprise|production|demo).*&quot;;

// matching testing url
String tmp = &quot;.*(testing).*&quot;;
Pattern patternTesting = Pattern.compile(tmp);
Matcher matcherTesting = patternTesting.matcher(vars.get(&quot;server&quot;));

// matching staging url
String tmp2 = &quot;.*(staging).*&quot;;
Pattern patternStaging = Pattern.compile(tmp2);
Matcher matcherStaging = patternStaging.matcher(vars.get(&quot;server&quot;));

// matching production url
String tmp3 = &quot;.*(production).*&quot;;
Pattern patternProduction = Pattern.compile(tmp3);
Matcher matcherProduction = patternProduction.matcher(vars.get(&quot;server&quot;));


if ( matcherTesting.find() ) {
	//vars.put(&quot;authToken&quot;, &quot;&lt;fill_in_testing_jwt_token_here&gt;&quot;);

	String tmp = &quot;.*(testing).*&quot;;
	Pattern patternTesting = Pattern.compile(tmp);
	Matcher matcherTesting = patternTesting.matcher(vars.get(&quot;server&quot;));
	
	if ( matcherTesting.find() ) {
		vars.put(&quot;tenantid&quot;,&quot;testing-soho&quot;);
	} else {
		vars.put(&quot;tenantid&quot;, &quot;soho&quot;);
	}
	vars.put(&quot;siteids&quot;,&quot;0&quot;);
	
} else if ( matcherStaging.find() ){
	//vars.put(&quot;authToken&quot;, &quot;&lt;fill_in_staging_jwt_token_here&gt;&quot;);

	String tmp = &quot;.*(staging).*&quot;;
	Pattern patternTesting = Pattern.compile(tmp);
	Matcher matcherTesting = patternTesting.matcher(vars.get(&quot;server&quot;));
	
	if ( matcherTesting.find() ) {
		vars.put(&quot;tenantid&quot;,&quot;baycare&quot;);
	} else {
		vars.put(&quot;tenantid&quot;, &quot;baycare&quot;);
	}
	vars.put(&quot;siteids&quot;,&quot;0&quot;);

} else if ( matcherProduction.find() ){
	//vars.put(&quot;authToken&quot;, &quot;&lt;fill_in_production_jwt_token_here&gt;&quot;);

	String tmp = &quot;.*(staging).*&quot;;
	Pattern patternTesting = Pattern.compile(tmp);
	Matcher matcherTesting = patternTesting.matcher(vars.get(&quot;server&quot;));
	
	if ( matcherTesting.find() ) {
		vars.put(&quot;tenantid&quot;,&quot;baycare&quot;);
	} else {
		vars.put(&quot;tenantid&quot;, &quot;baycare&quot;);
	}
	vars.put(&quot;siteids&quot;,&quot;0&quot;);

} else {
	//this case is else, then match for demo
	vars.put(&quot;tenantid&quot;,vars.get(&quot;tenantid&quot;));
	vars.put(&quot;siteids&quot;,vars.get(&quot;siteids&quot;));

	String tmp = &quot;.*(demo).*&quot;;
	Pattern patternTesting = Pattern.compile(tmp);
	Matcher matcherTesting = patternTesting.matcher(vars.get(&quot;server&quot;));	
	if ( matcherTesting.find() ) {
		vars.put(&quot;tenantid&quot;,&quot;healthcare&quot;);
	} 
	vars.put(&quot;siteids&quot;,&quot;0&quot;);
}


// setting the counter loop to 1 if setting is not &quot;allranges&quot;
String timevalue = vars.get(&quot;timevalue&quot;);
if ( !timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;default-time-loop&quot;, 1);
}
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Beanshell - set deviceid base on tenant" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import java.util.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


//String tmp = &quot;.*(aws|baycare|bmcc|lb00|api|x2|m2|cloud|enterprise|production|demo).*&quot;;
String tmp = &quot;.*(baycare).*&quot;;
Pattern patternBaycare = Pattern.compile(tmp);
Matcher matcherBaycare = patternBaycare.matcher(vars.get(&quot;tenantid&quot;));

if ( matcherBaycare.find() ) {
	vars.put(&quot;deviceid&quot;, &quot;a0:d3:c1:05:5a:88&quot;);
} else {
	vars.put(&quot;deviceid&quot;, &quot;00:0c:29:a4:4a:74&quot;);
}

</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${authToken}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - IoT Profiles" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;ip&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;

//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}


String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 


if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Through site - category - profile" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">loopFilter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set filter" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;

String[] varArray = {&quot;site&quot;, &quot;category&quot;, &quot;profile&quot;};
idx = Integer.parseInt(vars.get(&quot;loopFilter&quot;))-1;
vars.put(&quot;outputtype&quot;, varArray[idx]);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${iotprofile-stats} - ${timerange} - ${outputtype}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                    <elementProp name="outputtype" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${outputtype}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">outputtype</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${iotprofile-stats}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - Series" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;ds&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;

//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 


if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run in batch" enabled="true">
              <stringProp name="IfController.condition">&quot;${batch}&quot; == &quot;yes&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime2}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime2}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime3}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime3}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime4}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime4}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run single" enabled="true">
              <stringProp name="IfController.condition">&quot;${batch}&quot; != &quot;yes&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - Risk Assessment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;ra&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;

//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 


if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-stat} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-stat}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - Network Summary" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;ns&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-seriesagg} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-seriesagg}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - Devices Subnet/VLAN" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;dv&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">subnet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-distribution} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-distribution}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - External Endpoint" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;ee&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-destinationagg} - ${timerange} - Header" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                  <elementProp name="groupbycountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">no</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">groupbycountry</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-destinationagg}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-destinationagg} - ${timerange} - Data" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                  <elementProp name="groupbycountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">yes</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">groupbycountry</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-destinationagg}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-destinationagg} - ${timerange} - Malicious" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                  <elementProp name="groupbycountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">yes</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">groupbycountry</stringProp>
                  </elementProp>
                  <elementProp name="malicious" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">yes</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">malicious</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-destinationagg}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - Top Devices" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;td&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                  <elementProp name="outputtype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${devagg-outputtype}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">outputtype</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-devagg} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-devagg}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex for MAC" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">matchMAC</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;key&quot;:&quot;(.+?)&quot;.*&quot;key&quot;:&quot;(.+?)&quot;.*&quot;key&quot;:&quot;(.+?)&quot;.*&quot;key&quot;:&quot;(.+?)&quot;.*&quot;key&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$</stringProp>
                <stringProp name="RegexExtractor.default">None</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through series" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">5</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">5</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">loopFilter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set filter" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;

String mac1 = vars.get(&quot;matchMAC_g1&quot;);
String mac2 = vars.get(&quot;matchMAC_g2&quot;);
String mac3 = vars.get(&quot;matchMAC_g3&quot;);
String mac4 = vars.get(&quot;matchMAC_g4&quot;);
String mac5 = vars.get(&quot;matchMAC_g5&quot;);
String[] varArray2 = {mac1, mac2, mac3, mac4, mac5};
idx2 = Integer.parseInt(vars.get(&quot;loopFilter&quot;))-1;
vars.put(&quot;filterMAC&quot;, varArray2[idx2]);

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-devseries} - ${timerange} - ${filterMAC}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                    <elementProp name="key" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${filterMAC}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">key</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-devseries}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard - Top App/Protocols" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;ta&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                  <elementProp name="outputtype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${appagg-outputtype}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">outputtype</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-appagg} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-appagg}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through series" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">5</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">5</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">loopFilter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - set filter" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;

//String[] varArray2 = {&quot;TCP&quot;, &quot;http&quot;, &quot;https&quot;, &quot;UDP&quot;, &quot;sccp&quot;};
String[] varArray2 = {&quot;TCP&quot;, &quot;ssh&quot;, &quot;https&quot;, &quot;openssh&quot;, &quot;icmp_dest_unreachable&quot;};
idx2 = Integer.parseInt(vars.get(&quot;loopFilter&quot;))-1;
vars.put(&quot;filterProtocol&quot;, varArray2[idx2]);

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${dashboard-appseries} - ${timerange} - ${filterProtocol}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                    <elementProp name="siteids" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${siteids}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">siteids</stringProp>
                    </elementProp>
                    <elementProp name="key" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${filterProtocol}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">key</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${dashboard-appseries}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Device Inventory - Series" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;is&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="filter_monitored" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${filter_monitored}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter_monitored</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run in batch" enabled="true">
              <stringProp name="IfController.condition">&quot;${batch}&quot; == &quot;yes&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${alert-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${alert-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${alert-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime2}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime2}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/iotinventory/${alert-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${alert-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime3}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime3}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${alert-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${alert-series} - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime4}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime4}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/${alert-series}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <intProp name="groupSize">4</intProp>
                  <longProp name="timeoutInMs">0</longProp>
                </SyncTimer>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run single" enabled="true">
              <stringProp name="IfController.condition">&quot;${batch}&quot; != &quot;yes&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Device Inventory - Series - ${timerange}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${stime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stime</stringProp>
                    </elementProp>
                    <elementProp name="etime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${etime}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">etime</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${apiversion}/api/iotinventory/series</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                  <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
                </DurationAssertion>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                </SizeAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Device Inventory - SankeyChart" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;dis&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="deviceid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceid</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${device-sankeychart} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${device-sankeychart}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Device Inventory - Unique Dest" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;did&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="deviceid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceid</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${device-destination} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${device-destination}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Device Inventory - Application" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iteration}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${simuser}</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1491502403000</longProp>
        <longProp name="ThreadGroup.end_time">1491502403000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If run" enabled="true">
          <stringProp name="IfController.condition">&quot;${test-to-run}&quot;==&quot;all&quot; || &quot;${test-to-run}&quot;==&quot;dia&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop through time ranges" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${default-time-loop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">loopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor- set timerange" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.Period;


//String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;all&quot;};
String[] varArray = {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;6months&quot;};
idx = Integer.parseInt(vars.get(&quot;loopCounter&quot;))-1;

//vars.put(&quot;timerange&quot;, varArray[idx]);
String timevalue = vars.get(&quot;timevalue&quot;);
if ( timevalue.equals(&quot;allranges&quot;) ) {
	vars.put(&quot;timerange&quot;, varArray[idx]);
} else {
	vars.put(&quot;timerange&quot;, timevalue);
}

String timerange = vars.get(&quot;timerange&quot;);
String forcetime = vars.get(&quot;force-etime-now&quot;);

// getting current time, assign to etime
ZonedDateTime dateTimeNow = ZonedDateTime.now( ZoneOffset.UTC );

if ( timerange.equals(&quot;hour&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusHours(2);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;minutes&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusMinutes(30).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusMinutes(30).toString());
	vars.put(&quot;etime2&quot;, starttime.plusMinutes(60).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusMinutes(60).toString());
	vars.put(&quot;etime3&quot;, starttime.plusMinutes(90).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusMinutes(90).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;day&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusDays(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;hour&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(6).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(6).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(12).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(12).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(18).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(18).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;week&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusWeeks(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusHours(42).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusHours(42).toString());
	vars.put(&quot;etime2&quot;, starttime.plusHours(84).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusHours(84).toString());
	vars.put(&quot;etime3&quot;, starttime.plusHours(126).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusHours(126).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;month&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(1);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(7).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(7).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(14).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(14).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(21).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(21).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;6months&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusMonths(6);
	vars.put(&quot;stime&quot;, starttime.toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusDays(45).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusDays(45).toString());
	vars.put(&quot;etime2&quot;, starttime.plusDays(90).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusDays(90).toString());
	vars.put(&quot;etime3&quot;, starttime.plusDays(135).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusDays(135).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
} 

if ( timerange.equals(&quot;all&quot;) ) {
	ZonedDateTime starttime = dateTimeNow.minusYears(16);
	vars.put(&quot;stime&quot;, &quot;-1&quot;);
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime&quot;, dateTimeNow.toString());
	}
	vars.put(&quot;interval&quot;, &quot;day&quot;);

	vars.put(&quot;stime1&quot;, starttime.toString());
	vars.put(&quot;etime1&quot;, starttime.plusYears(4).toString());		
	vars.put(&quot;stime2&quot;, starttime.plusYears(4).toString());
	vars.put(&quot;etime2&quot;, starttime.plusYears(8).toString());	
	vars.put(&quot;stime3&quot;, starttime.plusYears(8).toString());
	vars.put(&quot;etime3&quot;, starttime.plusYears(12).toString());	
	vars.put(&quot;stime4&quot;, starttime.plusYears(12).toString());
	if ( forcetime.equals(&quot;yes&quot;) ) {
		vars.put(&quot;etime4&quot;, &quot;now&quot;);
	} else {
		vars.put(&quot;etime4&quot;, dateTimeNow.toString());
	}
}

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${direction}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="deviceid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceid</stringProp>
                  </elementProp>
                  <elementProp name="interval" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${interval}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">interval</stringProp>
                  </elementProp>
                  <elementProp name="tenantid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${tenantid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantid</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">app</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connecttime}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${responsetime}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${device-destination} - ${timerange}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="stime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${stime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">stime</stringProp>
                  </elementProp>
                  <elementProp name="etime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${etime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">etime</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${apiversion}/api/${device-destination}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">${assert-max-duration}</stringProp>
              </DurationAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">${assert-min-body}</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/vinhnguyen/Desktop/zingbox/performance/jmeter/jmeterlog.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThroughputVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transaction Throughput vs Threads" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
